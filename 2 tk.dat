// Дизассемблер IDA Freeware 7.0
// файл "13"
Ответьте на вопросы:
1) Какие переменные можно выделить в программе?

	Переменные используемые в main()
	dword var_18, var_14 - параметры вводимые пользователем
	dword var_10, var_C - результат работы программы
	qword var_8 - переменная в которую помещается значение
		генерируемое для защиты стека
		
	Переменные используемые в f(int, int)
	dword var_18, var_14 - для параметров
	dword var_4  - счетчик
	dword var_8 - под результат
	dword x - модуль (15), глобальная

2) Какие функции можно выделить в программе?

	_scanf - функция ввода
	_printf - функция вывода
	стандартные библиотечные функциии СИ
	_Z1fii - функция подсчета
		Если 2й параметр < счетчика(стартовое значение 1), завершить функцию,
			с результатом в качестве значения параметра 1.
		Иначе переменной предназначенной для хранения результата присвоить значение
			равное остатку от деления на 15 произведения 
				- переменная_результат и первого параметра функции,
				увеличить значение счетчика на 1.
	
3) Что является результатом работы программы?

	2 значения, полученными вызовом функции f(int, int)
	в качестве параметров исползьуются значения введенные пользователем
	сначала f(int значение_1, int значение_2), 
	а потом f(int значение_2, int значение_1).
	Что происходит в f?
		Модульное умножение(Алгоритм Монтгомери?)


 .rodata //readonly
 ; char format[]
 format          db 'Enter two numbers: ',0
                                         ; DATA XREF: main+17↑o
 ; char aDD[]
 aDD             db '%d %d',0            ; DATA XREF: main+33↑o
 ; char aResultsDD[]
 aResultsDD      db 'Results: %d, %d',0Ah,0
                                         ; DATA XREF: main+70↑o


 .data //readwrite									 
                 public x	// global?
 x               dd 0Fh                  ; DATA XREF: f(int,int)+2A↑r


; int __cdecl main(int argc, const char **argv, const char **envp)
                  public main
  main            proc near               ; DATA XREF: _start+1D↑o
 
  var_18          = dword ptr -18h
  var_14          = dword ptr -14h
  var_10          = dword ptr -10h
  var_C           = dword ptr -0Ch
  var_8           = qword ptr -8
 
                  push    rbp
                  mov     rbp, rsp
				  
                  sub     rsp, 20h
                  mov     rax, fs:28h
                  mov     [rbp+var_8], rax
				  
                  xor     eax, eax
                  lea     rdi, format     ; "Enter two numbers: "
                  mov     eax, 0
                  call    _printf
				  
                  lea     rdx, [rbp+var_14]
                  lea     rax, [rbp+var_18]
                  mov     rsi, rax
                  lea     rdi, aDD        ; "%d %d"
                  mov     eax, 0
                  call    _scanf
				  
                  mov     edx, [rbp+var_14]
                  mov     eax, [rbp+var_18]
                  mov     esi, edx        ; int
                  mov     edi, eax        ; int
                  call    _Z1fii          ; f(int,int)
				  
                  mov     [rbp+var_10], eax
                  mov     edx, [rbp+var_18]
                  mov     eax, [rbp+var_14]
                  mov     esi, edx        ; int
                  mov     edi, eax        ; int
                  call    _Z1fii          ; f(int,int)
				  
                  mov     [rbp+var_C], eax
                  mov     edx, [rbp+var_C]
                  mov     eax, [rbp+var_10]
                  mov     esi, eax
                  lea     rdi, aResultsDD ; "Results: %d, %d\n"
                  mov     eax, 0
                  call    _printf
				  
                  mov     eax, 0
                  mov     rcx, [rbp+var_8]
                  xor     rcx, fs:28h
                  jz      short locret_7D8
                  call    ___stack_chk_fail
 
  locret_7D8:                             ; CODE XREF: main+93↑j
                  leave
                  retn
  main            endp
  
    
  ; __int64 __fastcall f(int, int)
                  public _Z1fii
  _Z1fii          proc near               ; CODE XREF: main+4E↓p
                                          ; main+60↓p
 
  var_18          = dword ptr -18h
  var_14          = dword ptr -14h
  var_8           = dword ptr -8
  var_4           = dword ptr -4
 
                  push    rbp
                  mov     rbp, rsp
                  mov     [rbp+var_14], edi
                  mov     [rbp+var_18], esi
                  mov     [rbp+var_8], 1
                  mov     [rbp+var_4], 1
 
  loc_712:                                ; CODE XREF: f(int,int)+3D↓j
                  mov     eax, [rbp+var_4]
                  cmp     eax, [rbp+var_18]
                  jg      short loc_739
				  
                  mov     eax, [rbp+var_8]
                  imul    eax, [rbp+var_14]
                  mov     [rbp+var_8], eax
				  
                  mov     ecx, cs:x
                  mov     eax, [rbp+var_8]
                  cdq
                  idiv    ecx
                  mov     [rbp+var_8], edx
                  add     [rbp+var_4], 1
                  jmp     short loc_712
  ; ---------------------------------------------------------------------------
 
  loc_739:                                ; CODE XREF: f(int,int)+1E↑j
                  mov     eax, [rbp+var_8]
                  pop     rbp
                  retn
  _Z1fii          endp


// Восстановление на языке СИ
// не совсем соответствует коду ассемблера
// но работает правильно

#include <stdlib.h>
char aDD[] = "%d %d";
char aResult[] = "Results:%d, %d\n";
char format[] = "Enter two numbers: ";
int x = 15;

int Z1fii(int var_14, int var_18)
{
    int var_8 = 1;
    int var_4 = 1;

    while(var_4 <= var_18)
    {
        var_8 = (var_8 * var_14) % x;
        var_4++;
    }
    return var_8;
}

int main()
{
    int var_18, var_14;
    int var_10, var_C;
    printf(format);
    scanf(aDD, &var_18, &var_14);
    var_10 = Z1fii(var_18, var_14);
    var_C = Z1fii(var_14, var_18);
    printf(aResult, var_10, var_C);
    return 0;
}

 Входные параметры	Оригинал		Восстановленный

 nums = 0 0     	Results: 1, 1	Results: 1, 1
 nums = 0 1     	Results: 0, 1	Results: 0, 1
 nums = 1 0     	Results: 1, 0	Results: 1, 0
 nums = 1 1     	Results: 1, 1	Results: 1, 1
 nums = 3 9     	Results: 3, 9	Results: 3, 9
 nums = 18 27   	Results: 12, 9	Results: 12, 9
 nums = 21 1    	Results: 6, 1	Results: 6, 1
 nums = 22 4    	Results: 1, 1	Results: 1, 1
 nums = 23 25   	Results: 8, 10	Results: 8, 10
 nums = 29 28   	Results: 1, 13	Results: 1, 13
 nums = 29 29   	Results: 14, 14	Results: 14, 14